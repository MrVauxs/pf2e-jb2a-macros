/* {"name":"Arcane Cascade","img":"systems/pf2e/icons/features/classes/arcane-cascade.webp","_id":"uCRBEs5o1lFVhRqT"} */
// Requires drag and dropping the Stance onto a token.
// Cannot be used standalone.

const [tokenD, tokenScale] = await pf2eAnimations.macroHelpers(args)

if (!args.length) args[0] = await Sequencer.EffectManager.getEffects({ origin: "arcane cascade", source: tokenD }).length ? "off" : "on";

const assets = game.modules.get("JB2A_DnD5e")?.active
    ? ["jb2a.token_border.circle.static.blue.002", "jb2a.divine_smite.caster.blueyellow","jb2a.divine_smite.caster.blueyellow","jb2a.divine_smite.caster.blueyellow"]
    : ["jb2a.token_border.circle.static.blue.010", "jb2a.divine_smite.caster.yellowwhite","jb2a.divine_smite.caster.orange","jb2a.divine_smite.caster.purplepink"];

if (args[0] == "on") {
    let seq = new Sequence({moduleName: "PF2e Animations", softFail: true})
    let damageType = args[1].item.flags.pf2e.rulesSelections.stanceArcaneCascade
    switch (damageType) {
        case "sonic": seq.effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.extras.tmfx.border.circle.outpulse.02.normal", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(1.2 * tokenScale)
                .fadeOut(1000)
                .fadeIn(1000)
                .belowTokens()
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.extras.tmfx.border.circle.outpulse.02.normal", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeOut(2000)
                .fadeIn(2000)
                .belowTokens()
                .scaleToObject(1.3 * tokenScale)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.extras.tmfx.border.circle.outpulse.02.normal", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .belowTokens()
                .fadeOut(3000)
                .fadeIn(3000)
                .scaleToObject(1.4 * tokenScale)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.extras.tmfx.border.circle.outpulse.02.normal", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeOut(4000)
                .fadeIn(4000)
                .belowTokens()
                .scaleToObject(1.5 * tokenScale)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.extras.tmfx.border.circle.outpulse.02.normal", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .belowTokens()
                .fadeOut(5000)
                .fadeIn(5000)
                .scaleToObject(1.6 * tokenScale)
                .persist(true, { persistTokenPrototype: true })
            .play();
            break;
        case "poison": seq.effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.icon.poison.dark_green", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .zIndex(10)
                .scaleToObject(1 * tokenScale)
                .animateProperty("sprite", "height", { from: 1 * tokenScale, to: 1.5 * tokenScale, duration: 1500, gridUnits: true, ease: "easeOutBack"})
                .animateProperty("sprite", "width", { from: 1 * tokenScale, to: 1.5 * tokenScale, duration: 1500, gridUnits: true, ease: "easeOutBack"})
                .fadeOut(1000)
                .fadeIn(600)
                .duration(2000)
                .waitUntilFinished(-1500)
            .effect()
                .playIf(!game.modules.get("JB2A_DnD5e")?.active)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.fog_cloud.02.green", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .belowTokens()
                .scaleToObject(2 * tokenScale)
                .fadeOut(500)
                .fadeIn(1500)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .playIf(!game.modules.get("JB2A_DnD5e")?.active)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.fog_cloud.02.green", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .opacity(0.3)
                .scaleToObject(2 * tokenScale)
                .fadeOut(500)
                .fadeIn(1500)
                .persist(true, { persistTokenPrototype: true })
            .play();
            break;
        case "positive": seq.effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.energy_strands.in.green.01.2", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(2 * tokenScale)
                .waitUntilFinished(-500)
            .effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.energy_strands.complete.blue.01", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .belowTokens()
                .scaleToObject(2 * tokenScale)
                .fadeOut(500)
                .filter("ColorMatrix", {
                    hue: 240
                })
                .fadeIn(500)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.energy_strands.overlay.blue.01", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .filter("ColorMatrix", {
                    hue: 240
                })
                .scaleToObject(2 * tokenScale)
                .fadeOut(500)
                .fadeIn(500)
                .persist(true, { persistTokenPrototype: true })
            .play();
            break;
        case "negative": seq.effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.energy_strands.in.purple.01.2", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .playIf(!game.modules.get("JB2A_DnD5e")?.active)
                .scaleToObject(2 * tokenScale)
                .waitUntilFinished(-500)
            .effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.energy_strands.complete.purple.01", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .belowTokens()
                .scaleToObject(2 * tokenScale)
                .fadeOut(500)
                .playIf(!game.modules.get("JB2A_DnD5e")?.active)
                .fadeIn(500)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .playIf(!game.modules.get("JB2A_DnD5e")?.active)
                .file("jb2a.energy_strands.overlay.purple.01", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(2 * tokenScale)
                .fadeOut(500)
                .fadeIn(500)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.energy_strands.in.green.01.2", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .playIf(game.modules.get("JB2A_DnD5e")?.active)
                .filter("ColorMatrix", {
                    hue: -170
                })
                .scaleToObject(2 * tokenScale)
                .waitUntilFinished(-500)
            .effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.energy_strands.complete.blue.01", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .belowTokens()
                .scaleToObject(2 * tokenScale)
                .fadeOut(500)
                .playIf(game.modules.get("JB2A_DnD5e")?.active)
                .filter("ColorMatrix", {
                    hue: 60
                })
                .fadeIn(500)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .playIf(game.modules.get("JB2A_DnD5e")?.active)
                .file("jb2a.energy_strands.overlay.blue.01", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .filter("ColorMatrix", {
                    hue: 60
                })
                .scaleToObject(2 * tokenScale)
                .fadeOut(500)
                .fadeIn(500)
                .persist(true, { persistTokenPrototype: true })
            .play();
            break;
        case "mental": seq.effect()
                .file(assets[3], true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .scaleToObject(1.5 * tokenScale)
                .waitUntilFinished(-2000)
            .effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.magic_signs.rune.enchantment.intro.purple", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .zIndex(10)
                .animateProperty("sprite", "height", { from: 1 * tokenScale, to: 1.5 * tokenScale, duration: 1500, gridUnits: true, ease: "easeOutBack"})
                .animateProperty("sprite", "width", { from: 1 * tokenScale, to: 1.5 * tokenScale, duration: 1500, gridUnits: true, ease: "easeOutBack"})
                .fadeOut(1500)
                .fadeIn(700)
            .effect()
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .file("jb2a.token_border.circle.static.purple.003", true)
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .opacity(0.6)
                .scaleToObject(2 * tokenScale)
                .fadeOut(500)
                .fadeIn(500)
                .persist(true, { persistTokenPrototype: true })
            .play();
            break;
        case "lawful": seq.effect()
                .file(assets[2], true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(2 * tokenScale)
                .waitUntilFinished(-2000)
            .effect()
                .file("jb2a.wind_stream.white", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(tokenScale)
                .rotate(90)
                .fadeOut(1500)
                .mask()
                .fadeIn(700)
                .tint("#FFA500")
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .file("jb2a.ward.rune.yellow.01", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .filter("ColorMatrix", {
                    hue: -20
                })
                .belowTokens()
                .scaleToObject(2 * tokenScale)
                .fadeOut(500)
                .fadeIn(500)
                .persist(true, { persistTokenPrototype: true })
            .play();
            break;
        case "good": seq.effect()
                .file(assets[1], true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(1.5 * tokenScale)
                .waitUntilFinished(-1400)
            .effect()
                .file("jb2a.bless.200px.intro.yellow", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(1.7 * tokenScale)
                .fadeOut(250)
                .waitUntilFinished(-500)
            .effect()
                .file("jb2a.bless.200px.loop.yellow", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .belowTokens()
                .scaleToObject(1.7 * tokenScale)
                .fadeOut(500)
                .persist(true, { persistTokenPrototype: true })
            .play();
            break;
        case "force": seq.effect()
                .file("jb2a.antilife_shell.blue_no_circle", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(1.4 * tokenScale)
                .waitUntilFinished(-1500)
            .effect()
                .file("jb2a.fireflies.many.01.blue", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .randomRotation()
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(1.4 * tokenScale)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .file("jb2a.wall_of_force.sphere.blue", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(1.3 * tokenScale)
                .fadeIn(800)
                .fadeOut(500)
                .persist(true, { persistTokenPrototype: true })
            .play();
            break;
        case "fire": seq.effect()
            .file("jb2a.fireflies.many.01.green", true)
            .origin("Unlearcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
            .attachTo(tokenD)        
                .tieToDocuments([args[1]?.item, tokenD])
            .filter("ColorMatrix", {
                hue: 300
            })
            .randomRotation()
            .scaleToObject(1.5 * tokenScale)
            .fadeIn(500)
            .fadeOut(500)
            .opacity(0.7)
            .persist(true, { persistTokenPrototype: true })
            .effect()
                .file("jb2a.fumes.fire.orange", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .spriteAnchor({ x: 0.1, y: 0.9 })
                .belowTokens()
                .scaleToObject(1.5 * tokenScale)
                .fadeIn(500)
                .fadeOut(500)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .file("jb2a.token_border.circle.static.blue.005", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeOut(3000)
                .filter("ColorMatrix", {
                    hue: 190
                })
                .scaleToObject(2 * tokenScale)
                .fadeIn(700)
                .opacity(0.9)
                .persist(true, { persistTokenPrototype: true })
            .play()
            break;
        case "electricity": seq.effect()
            .file("jb2a.divine_smite.caster.blueyellow", true)
            .origin("Unlearcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
            .filter("ColorMatrix", {
                hue: 100,
                contrast: 1,
                saturate: 0     
            })
            .tint("#7DF9FF")
            .attachTo(tokenD)        
                .tieToDocuments([args[1]?.item, tokenD])
            .scaleToObject(2 * tokenScale)
            .waitUntilFinished(-1500)
            .effect()
                .file("jb2a.static_electricity.03.blue", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(1.5 * tokenScale)
                .fadeOut(500)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .file(assets[0], true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeOut(3000)
                .scaleToObject(2 * tokenScale)
                .fadeIn(700)
                .persist(true, { persistTokenPrototype: true })
            .play()
            break;
        case "evil": seq.effect()
                .file("jb2a.icon.fear.orange", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeIn(500)
                .fadeOut(500)
                .duration(2000)
                .scaleToObject(2 * tokenScale)
            .effect()
                .file("jb2a.wind_stream.white", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(tokenScale)
                .rotate(90)
                .fadeOut(1500)
                .mask()
                .fadeIn(700)
                .tint("#ff4500")
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .file("jb2a.token_border.circle.static.blue.001", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeOut(3000)
                .opacity(0.6)
                .scaleToObject(2 * tokenScale)
                .fadeIn(700)
                .tint("#ff4500")
                .persist(true, { persistTokenPrototype: true })
            break;
        case "cold": seq.effect()
                .file("jb2a.ice_spikes.radial.burst.white", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeIn(500)
                .fadeOut(500)
                .belowTokens()
                .duration(2000)
                .scaleToObject(4 * tokenScale)
            .effect()
                .file("jb2a.wind_stream.white", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(tokenScale)
                .rotate(90)
                .fadeOut(1500)
                .mask()
                .fadeIn(700)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .file("jb2a.token_border.circle.static.blue.001", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeOut(3000)
                .opacity(0.6)
                .scaleToObject(2 * tokenScale)
                .fadeIn(700)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .file("jb2a.shield_themed.below.ice.01.blue", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeOut(3000)
                .opacity(0.6)
                .belowTokens()
                .scaleToObject(1.4 * tokenScale)
                .fadeIn(700)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .file("jb2a.shield_themed.above.ice.01.blue", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeOut(3000)
                .scaleToObject(1.4 * tokenScale)
                .fadeIn(700)
                .persist(true, { persistTokenPrototype: true })
         break;
        case "chaotic": seq.effect()
                .file("jb2a.icon.fear.dark_purple", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeIn(500)
                .fadeOut(500)
                .duration(2000)
                .scaleToObject(2 * tokenScale)
            .effect()
                .file("jb2a.wind_stream.white", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(tokenScale)
                .rotate(90)
                .fadeOut(1500)
                .mask()
                .fadeIn(700)
                .tint("#800080")
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .file("jb2a.token_border.circle.static.blue.001", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeOut(3000)
                .opacity(0.6)
                .scaleToObject(2 * tokenScale)
                .fadeIn(700)
                .tint("#800080")
                .persist(true, { persistTokenPrototype: true })
            break;
        case "acid": seq.effect()
                .file("jb2a.liquid.splash.blue", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .atLocation(tokenD)
                .fadeIn(500)
                .fadeOut(500)
                .tint("#8ffe09")
                .scaleToObject(2 * tokenScale)
            .effect()
                .file("jb2a.liquid.splash.blue", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .atLocation(tokenD)
                .fadeIn(500)
                .belowTokens()
                .fadeOut(500)
                .tint("#8ffe09")
                .scaleToObject(2 * tokenScale)
            .effect()
                .file("jb2a.wind_stream.white", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(tokenScale)
                .rotate(90)
                .fadeOut(1500)
                .mask()
                .fadeIn(700)
                .tint("#8ffe09")
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .file("jb2a.token_border.circle.static.blue.001", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeOut(3000)
                .opacity(0.6)
                .scaleToObject(2 * tokenScale)
                .fadeIn(700)
                .tint("#8ffe09")
                .persist(true, { persistTokenPrototype: true })
            break;
        case "slashing":
        case "piercing":
        case "bludgeoning": seq.effect()
                .file("jb2a.extras.tmfx.outpulse.circle.02.normal", true)
                .atLocation(tokenD)
                .size(4, {gridUnits: true})
                .playIf(damageType == "bludgeoning")
                .opacity(0.25)
            .effect()
                .file("jb2a.impact.ground_crack.orange.01", true)
                .atLocation(tokenD)
                .belowTokens()
                .playIf(damageType == "bludgeoning")
                .filter("ColorMatrix", {hue: -15,saturate: 1})
                .size(3.5, {gridUnits: true})
                .zIndex(1)
                .tint("#808080")
            .effect()
                .file("jb2a.impact.ground_crack.still_frame.01", true)
                .atLocation(tokenD)
                .playIf(damageType == "bludgeoning")
                .belowTokens()
                .fadeIn(2000)
                .filter("ColorMatrix", {hue: -15,saturate: 1})
                .size(3.5, {gridUnits: true})
                .fadeOut(20000)
                .tint("#808080")
                .zIndex(0)
            .effect()
                .file("jb2a.wind_stream.white", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .scaleToObject(tokenScale)
                .rotate(90)
                .fadeOut(1500)
                .mask()
                .fadeIn(700)
                .persist(true, { persistTokenPrototype: true })
            .effect()
                .file("jb2a.token_border.circle.static.blue.001", true)
                .origin("arcane cascade")
                .name(tokenD.name + "'s Arcane Cascade")
                .attachTo(tokenD)            
                .tieToDocuments([args[1]?.item, tokenD])
                .fadeOut(3000)
                .opacity(0.6)
                .scaleToObject(2 * tokenScale)
                .fadeIn(700)
                .tint("#808080")
                .persist(true, { persistTokenPrototype: true })
            break;
    }
    seq.play()
} else if (args[0] == "off") {
    await Sequencer.EffectManager.endEffects({ origin: "arcane cascade", object: tokenD })
}